<?xml version="1.0" encoding="UTF-8"?>
<beans:beans 
  xmlns:beans="http://www.springframework.org/schema/beans"
  xmlns="http://www.springframework.org/schema/security"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
              http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-2.0.4.xsd">  

  <http auto-config='false' 
  		realm="chassis-development-realm"
  		entry-point-ref="authenticationEntryPoint"
  		access-decision-manager-ref="accessDecisionManager"/>
  
  <beans:bean id="authenticationEntryPoint" class="org.springframework.security.ui.preauth.PreAuthenticatedProcessingFilterEntryPoint"/>
  
  <!--Config to use external authentication-->
  <beans:bean id="WebAuthPreAuthenticatedProcessingFilter" class="org.cggh.chassis.generic.user.service.webauth.WebAuthPreAuthenticatedProcessingFilter">
      <custom-filter position="PRE_AUTH_FILTER" />
      <beans:property name="authenticationManager" ref="authenticationManager" />
    <beans:property name="dataSource" ref="dataSource"/>
  </beans:bean>

  <authentication-manager alias="authenticationManager" />

  <beans:bean id="preauthAuthProvider" class="org.springframework.security.providers.preauth.PreAuthenticatedAuthenticationProvider">
      <custom-authentication-provider />
      <beans:property name="preAuthenticatedUserDetailsService">
        <beans:bean id="userDetailsServiceWrapper"
              class="org.springframework.security.userdetails.UserDetailsByNameServiceWrapper">
          <beans:property name="userDetailsService" ref="userDetailsService"/>
        </beans:bean>
      </beans:property>
  </beans:bean>
  
  <!--Config to get user details and permissions directly from CGGH database-->
  <authentication-provider user-service-ref='userDetailsService'/>
  <beans:bean id="userDetailsService" class="org.springframework.security.userdetails.jdbc.JdbcDaoImpl">
    <beans:property name="dataSource" ref="dataSource"/>
    <beans:property name="enableGroups" value="false"/>
    <beans:property name="enableAuthorities" value="true"/>
    <beans:property name="usersByUsernameQuery" value="SELECT email AS user_name,
                                                              'password' AS password,
                                                              1 AS enabled
                                                         FROM master_user
                                                         WHERE email=?"/>
    <beans:property name="authoritiesByUsernameQuery" value="SELECT mu.email AS user_name,
                                                                    p.permission AS authority
                                                             FROM user_permission up
                                                              INNER JOIN master_user mu
                                                              	  ON up.user_id = mu.user_id
                                                              INNER JOIN permission p
                                                                  ON up.permission_id = p.permission_id
                                                             WHERE mu.email=?"/>
  </beans:bean>

  <beans:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <beans:property name="driverClassName" value="com.mysql.jdbc.Driver"/>
    <beans:property name="url" value="jdbc:mysql://charlie:3306/network"/>
    <beans:property name="username" value="user"/>
    <beans:property name="password" value="pass"/>
  </beans:bean>
    
  <!--Allow any kind of authority to be defined-->
  <beans:bean id="accessDecisionManager" class="org.springframework.security.vote.UnanimousBased">
      <beans:property name="decisionVoters">
          <beans:list>
              <beans:ref bean="roleVoter"/>
          </beans:list>
      </beans:property>
  </beans:bean>

  <beans:bean id="roleVoter" class="org.springframework.security.vote.RoleVoter">
      <beans:property name="rolePrefix" value=""/>
  </beans:bean>
  
</beans:beans>