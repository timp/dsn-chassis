// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.cggh.quac.web;

import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.String;
import java.util.Collection;
import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.cggh.quac.model.Role;
import org.cggh.quac.model.Users;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect UsersController_Roo_Controller {
    
    @Autowired
    private GenericConversionService UsersController.conversionService;
    
    @RequestMapping(method = RequestMethod.POST)
    public String UsersController.create(@Valid Users users, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("users", users);
            return "userses/create";
        }
        users.persist();
        return "redirect:/userses/" + encodeUrlPathSegment(users.getUid().toString(), request);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String UsersController.createForm(Model model) {
        model.addAttribute("users", new Users());
        return "userses/create";
    }
    
    @RequestMapping(value = "/{uid}", method = RequestMethod.GET)
    public String UsersController.show(@PathVariable("uid") Integer uid, Model model) {
        model.addAttribute("users", Users.findUsers(uid));
        model.addAttribute("itemId", uid);
        return "userses/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String UsersController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("userses", Users.findUsersEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Users.countUserses() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("userses", Users.findAllUserses());
        }
        return "userses/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String UsersController.update(@Valid Users users, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("users", users);
            return "userses/update";
        }
        users.merge();
        return "redirect:/userses/" + encodeUrlPathSegment(users.getUid().toString(), request);
    }
    
    @RequestMapping(value = "/{uid}", params = "form", method = RequestMethod.GET)
    public String UsersController.updateForm(@PathVariable("uid") Integer uid, Model model) {
        model.addAttribute("users", Users.findUsers(uid));
        return "userses/update";
    }
    
    @RequestMapping(value = "/{uid}", method = RequestMethod.DELETE)
    public String UsersController.delete(@PathVariable("uid") Integer uid, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        Users.findUsers(uid).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/userses?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    @ModelAttribute("roles")
    public Collection<Role> UsersController.populateRoles() {
        return Role.findAllRoles();
    }
    
    Converter<Role, String> UsersController.getRoleConverter() {
        return new Converter<Role, String>() {
            public String convert(Role role) {
                return new StringBuilder().append(role.getName()).toString();
            }
        };
    }
    
    Converter<Users, String> UsersController.getUsersConverter() {
        return new Converter<Users, String>() {
            public String convert(Users users) {
                return new StringBuilder().append(users.getName()).append(" ").append(users.getMail()).append(" ").append(users.getStatus()).toString();
            }
        };
    }
    
    @PostConstruct
    void UsersController.registerConverters() {
        conversionService.addConverter(getRoleConverter());
        conversionService.addConverter(getUsersConverter());
    }
    
    private String UsersController.encodeUrlPathSegment(String pathSegment, HttpServletRequest request) {
        String enc = request.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
