<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5">


  <display-name>Chassis/WWARN</display-name>


  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
  
  
  <!--+
      |
      | HTTP Method Override Filter
      | ***************************
      |
      | (N.B. put this before spring security, so security is applied to value of
      | method override if given)
      |
      +-->
  

  <filter>
    <filter-name>HttpMethodOverrideFilter</filter-name>
    <filter-class>org.cggh.chassis.generic.http.HttpMethodOverrideFilter</filter-class>
    <init-param>
      <param-name>allowedOverrides</param-name>
      <param-value>PUT DELETE</param-value>
    </init-param>
  </filter>


  <filter-mapping>
    <filter-name>HttpMethodOverrideFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  

  <!--+
      | Spring Security Configuration
      | *****************************
      | 
      +-->
  
  <context-param>
    <param-name>contextConfigLocation</param-name>

    <!-- security configuration for the development environment -->    
    <param-value>
      WEB-INF/security-development.xml
    </param-value>

    <!-- security configuration for the production environment, using CAS and Drupal -->
<!--
    <param-value>
      WEB-INF/security-cas-drupal.xml
    </param-value>
-->
    
  </context-param>
  
  
  <filter>
    <filter-name>springSecurityFilterChain</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
  </filter>

  
  <filter-mapping>
    <filter-name>springSecurityFilterChain</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  
  
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  
  
  <!-- store username in request attribute so it can be accessed easily in xqueries -->
  
  <filter>
    <filter-name>SpringSecuritySetUserNameAttributeFilter</filter-name>
    <filter-class>org.cggh.chassis.generic.http.SpringSecuritySetUserNameAttributeFilter</filter-class>
  </filter>
  
  
  <filter-mapping>
    <filter-name>SpringSecuritySetUserNameAttributeFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  

  <!--+
      | Embedded eXist Configuration
      | ****************************
      | 
      +-->
  
  <!-- 
    Initialize Log4j using a servlet.
    Only needed when eXist is deployed as a .war file in e.g. Tomcat.
  -->
  <servlet>
    <servlet-name>log4j-init</servlet-name>
    <servlet-class>org.exist.http.servlets.Log4jInit</servlet-class>
    
    <init-param>
      <param-name>log4j-init-file</param-name>
      <param-value>WEB-INF/log4j.xml</param-value>
    </init-param>
    
    <init-param>
      <param-name>log4j-log-dir</param-name>
      <param-value>WEB-INF/logs</param-value>
    </init-param>
    
    <load-on-startup>1</load-on-startup>
  </servlet>  
  
  
  <!-- 
    DatabaseAdminServlet: this servlet can be used to ensure that
    eXist is running in the background. Just set the start-parameter 
    to true and load-on-startup to 1 
  -->
  <servlet>
    <servlet-name>EXistServlet</servlet-name>
    <servlet-class>org.exist.http.servlets.EXistServlet</servlet-class>
    
    <!--
      where to find eXist's configuration file relative to the basedir 
      of the web-application.
    -->
    <init-param>
      <param-name>configuration</param-name>
      <param-value>conf.xml</param-value>
    </init-param>
    
    <!-- 
      eXist's home directory. All file names in the configuration file 
      will be relative to this directory.
    -->
    <init-param>
      <param-name>basedir</param-name>
      <param-value>WEB-INF/</param-value>
    </init-param>
    
    <init-param>
      <param-name>start</param-name>
      <param-value>true</param-value>
    </init-param>
    
    <load-on-startup>2</load-on-startup>
  </servlet>


  <!-- Atom Atom Publishing Protocol -->
  
  <servlet>
    <servlet-name>AtomServlet</servlet-name>
    <servlet-class>org.exist.atom.http.AtomServlet</servlet-class>
    <init-param>
      <param-name>use-default-user</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>user</param-name>
      <param-value>admin</param-value>
    </init-param>
    <init-param>
      <param-name>password</param-name>
      <param-value></param-value>
    </init-param>
  </servlet>


  <servlet-mapping>
    <servlet-name>AtomServlet</servlet-name>
    <url-pattern>/atom/*</url-pattern>
  </servlet-mapping>
  
  
  <!-- XQuery (not for database stored queries) -->
    
  <servlet>
    <servlet-name>XQueryServlet</servlet-name>
    <servlet-class>org.exist.http.servlets.XQueryServlet</servlet-class>
    
    <init-param>
      <param-name>uri</param-name>
      <param-value>xmldb:exist:///db</param-value>
    </init-param>
    
    <init-param>
      <param-name>form-encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    
    <init-param>
      <param-name>container-encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
  </servlet>
  
  
  <servlet-mapping>
    <servlet-name>XQueryServlet</servlet-name>
    <url-pattern>*.xql</url-pattern>
  </servlet-mapping>
  
  
  <!--+
      | HTTP Content Type Override Filter, for Atom Services 
      | needed to work around bug in GWT hosted mode browser
      | see http://code.google.com/p/google-web-toolkit/issues/detail?id=4095
      | N.B. this is needed for development only - remove this in production
      +-->
  
  
  <filter>
    <filter-name>ContentTypeOverrideFilter</filter-name>
    <filter-class>org.cggh.chassis.generic.http.ContentTypeOverrideFilter</filter-class>
    <init-param>
      <param-name>contentType</param-name>
      <param-value>application/xml</param-value>
    </init-param>
  </filter>
  
  <filter-mapping>
    <filter-name>ContentTypeOverrideFilter</filter-name>
    <servlet-name>AtomServlet</servlet-name>
  </filter-mapping>
  
  <!--+
      | Authorization Override Filter
      | used to strip Authorization header 
      | so eXist AtomServlet doesn't get confused by Spring Security
      | if configured to use HTTP basic or digest authentication
      +-->
  
  <filter>
    <filter-name>AuthorizationOverrideFilter</filter-name>
    <filter-class>org.cggh.chassis.generic.http.RequestHeaderOverrideFilter</filter-class>
    <init-param>
      <param-name>headerName</param-name>
      <param-value>Authorization</param-value>
    </init-param>
  </filter>
  
  <filter-mapping>
    <filter-name>AuthorizationOverrideFilter</filter-name>
    <servlet-name>AtomServlet</servlet-name>
  </filter-mapping>
  
  
  
  
  <!--+
      | UI Applications Configuration
      | *****************************
      | 
      +-->
  
  <servlet>
    <description>submitter upload file form submit handler</description>
    <display-name>SubmitterUploadFileFormSubmitHandler</display-name>
    <servlet-name>SubmitterUploadFileFormSubmitHandler</servlet-name>
    <servlet-class>org.cggh.chassis.wwarn.ui.submitter.server.UploadFileFormSubmitHandler</servlet-class>
    <init-param>
      <description>the URL of the Atom collection where the uploaded file content (i.e., media) will be POSTed</description>
      <param-name>collection.media.url</param-name>
      <param-value>http://localhost:8080/chassis-wwarn-ui/atom/edit/media</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>SubmitterUploadFileFormSubmitHandler</servlet-name>
    <url-pattern>/submitter/upload</url-pattern>
  </servlet-mapping>


</web-app>