<?xml version="1.0" encoding="UTF-8"?>
<project name="JAXB" default="jaxb-local" basedir=".">

	<!-- set global properties for this build -->
	<property name="package" value="JAXB" />
	<property name="tool" value="X:\workspace\software" />
	<property name="ws.dist" value="\tmpBuild" />
	<property name="dist" value="${ws.dist}/${package}.dist" />
	<property name="jwsdp.home" value="D:\software\jaxb-ri-20110601" />

	<property environment="env" />

	<property name="classpath" value="${jwsdp.home}\lib\jaxb-impl.jar
		${jwsdp.home}\lib\jaxb1-impl.jar
    								 :${jwsdp.home}\lib\jaxb-api.jar
	                                 :${jwsdp.home}\lib\jsr173_1.0_api.jar
    								 :${jwsdp.home}\lib\activation.jar" />

	<!-- variables from here down probably won't need to change for different projects -->
	<property name="base.dir" value="${ws.dist}/${package}" />

	<property name="build" value="${ws.dist}/${package}.build" />
	<property name="src.name" value="src" />
	<property name="src" value="${base.dir}/${src.name}" />

	<property name="src.resources" value="${base.dir}/resources" />
	<property name="build.resources" value="${build}" />

	<property name="cvsroot" value=":pserver:${cvs.user}:${cvs.password}@oxdaps52:/disk01/cvs/smart" />
	<property name="cvsver" value="" />

	<property name="doc" value="${dist}/doc" />

	<property name="ver" value="" />
	<property name="fver" value="" />

	<property name="test.runner" value="junit.textui.TestRunner" />
	<property name="test.failonerror" value="true" />


	<!-- are we running from the command line or from within eclipse? -->
	<target name="check_eclipse">
		<available property="in_eclipse" classname="org.eclipse.ant.core.AntRunner" />
	</target>

	<!-- if we're running within eclipse set the build compile to the eclipse one? -->
	<target name="set_compiler" if="in_eclipse" depends="check_eclipse">
		<property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter" />
	</target>

	<!-- if we're running outside eclipse set basedir and jvm settings appropriately -->
	<target name="test_file" unless="in_eclipse" depends="check_eclipse">
		<property name="basedir" value="${ws.dist}" />
		<property name="jvm.arg.test" value="-Dworkspace.home=${ws.dist}" />
		<property name="jvm.arg" value="" />
	</target>

	<!-- if we're running inside eclipse set jvm settings appropriately -->
	<target name="test_file_eclipse" if="in_eclipse" depends="check_eclipse">
		<property name="jvm.arg" value="" />
		<property name="jvm.arg.test" value="" />
	</target>

	<!-- init by ensuring directories exist -->
	<target name="init" depends="set_compiler,test_file,test_file_eclipse">
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${ws.dist}" />
		<mkdir dir="${dist}" />
		<mkdir dir="${build}" />
	</target>

	<!-- 
		requires cvs.exe which can be got from
		www.cvshome.org/downloads.html
	-->
	<!-- remove the checked out files -->
	<target name="cvsclean" depends="init">
		<cvs cvsRoot="${cvsroot}" command="-Q release -d" quiet="true" package="${package}" dest="${ws.dist}" />
	</target>

	<!-- Check out files for ${package} into ${ws.dist} 
		if ${cvsver is set then checkout using that tag -->
	<target name="cvsget" depends="init" unless="code.exists">
		<cvs cvsRoot="${cvsroot}" tag="${cvsver}" package="${package}" dest="${ws.dist}" />
	</target>

	<taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask" classpath="${jwsdp.home}/lib/jaxb-xjc.jar">
		<classpath>
			<fileset dir="${jwsdp.home}">
				<include name="jaxp/**/*.jar" />
				<include name="jwsdp-shared/lib/**/*.jar" />
			</fileset>
		</classpath>
	</taskdef>

	<target name="jaxb">
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${src.name}" includes="**/*" />
		</delete>
		<mkdir dir="${src.name}" />
		<xjc destdir="${src.name}" extension="true">
			<schema dir="schema" includes="*.xsd" />
		</xjc>
	</target>

	<!-- identical to jaxb apart from the dir - to be used within RAD -->
	<!-- Must be run from within eclipse -->
	<!-- If this fails then on the Run As -> Ant Build... 
		Under the JRE tab click Run in the same JRE as the workspace -->
	<target name="jaxb-local">
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${src.name}" includes="**/*" />
		</delete>
		<mkdir dir="${src.name}" />
		<xjc destdir="${src.name}" extension="true">
			<schema dir="schema" includes="*.xsd" />
		</xjc>
		<eclipse.refreshLocal resource="JAXB/${src.name}" depth="infinite"/>
	</target>

	<!-- checkout from cvs and set the code.exists property
		if the check out was sucessful -->
	<target name="setup" depends="cvsget,jaxb" unless="code.exists">
		<property name="code.exists" value="false" />
		<available property="code.exists" file="${src}/com" type="dir" />
	</target>

	<!-- Compile the java code from ${src} into ${build} 
		but do not have any interaction with cvs -->
	<target name="compiletask" depends="init" if="code.exists">
		<echo message="compiling code with ${build.compiler}" />
		<javac source="1.5" target="1.5" classpath="${classpath}" srcdir="${src}" destdir="${build}" deprecation="on" verbose="off" />
	</target>

	<!-- Compile the code after checking out first -->
	<target name="compilebuild" depends="init,setup" unless="code.exists">
		<antcall target="compiletask">
		</antcall>
	</target>

	<!-- Always compile the code -->
	<target name="compile" depends="compilebuild,compiletask">
	</target>

	<!-- Create distribution packages -->
	<target name="dist" depends="compile,test,javadoc" if="code.exists">
		<echo message="Creating distribution for ${ver}" />

		<!-- Create the lib directory into which the class-containing jar is built -->
		<mkdir dir="${dist}/lib" />

		<!-- Create an empty VERSION-n-n-n into build directory 
			(will get archived into the class-containing jar) -->
		<echo message="" file="${build}/VERSION${fver}" />

		<!-- Produce the output jar file that will include all the classes -->
		<jar jarfile="${dist}/lib/${package}.jar" basedir="${build}" excludes="**/*Test.class" />
		<!-- Add the schema files -->
		<jar jarfile="${dist}/lib/${package}.jar" basedir="${base.dir}/WebContent/schema" update="true" />
		<!-- Produce the output distribution files, 
			one containing the class containing jars and any associated javadoc
			and one containing all of the source. 
			
			File will be named differently depending on whether a version id was passed in -->
		<antcall target="produce.output.dstamp" />
		<antcall target="produce.output.version" />
	</target>

	<!-- Produce the output files -->
	<target name="produce.output.dstamp" unless="version">
		<echo message="Building output with DateStamp name" />
		<zip zipfile="${dist}/${package}-${DSTAMP}.zip" basedir="${dist}" excludes="*.zip, checkstyle_errors.xml" />
		<zip zipfile="${dist}/${package}-src-${DSTAMP}.zip" basedir="${base.dir}" excludes="classes/**, .vcm_meta, .zipCreation, ws-providers.wsdl, *Test.java" />
	</target>

	<!-- Produce the output files -->
	<target name="produce.output.version" if="version">
		<echo message="Building output with version ${version}" />
		<zip zipfile="${dist}/${package}-${version}.zip" basedir="${dist}" excludes="*.zip, checkstyle_errors.xml" />
		<zip zipfile="${dist}/${package}-src-${version}.zip" basedir="${base.dir}" excludes="classes/**, .vcm_meta, .zipCreation, ws-providers.wsdl, *Test.java" />
	</target>

	<!-- Javadoc the existing code -->
	<target name="javadoctask" if="code.exists">
		
	</target>

	<!-- Check out the code and javadoc it -->
	<target name="javadocbuild" depends="init,setup" unless="code.exists">
		<antcall target="javadoctask">
		</antcall>
	</target>

	<!-- Javadoc -->
	<target name="javadoc" depends="javadocbuild,javadoctask">
	</target>

	<!-- Check that the source code matches Java standards -->
	<target name="checkstyle" depends="cvsget">
		<!--
		<checkstyle properties="${tool}\..\.metadata\.plugins\com.atlassw.tools.eclipse.checkstyle\checkstyle.properties">
			<fileset dir="${src}" includes="**/*.java" excludes="org/**" />
			<formatter type="xml" toFile="${dist}/checkstyle_errors.xml" />
		</checkstyle>
		-->
	</target>

	<!-- Run the junit tests for this project -->
	<target name="test" depends="compile" if="test.entry" description="runs (junit) unit tests">
		<!--
		<java classname="${test.runner}" fork="yes" dir="${build}" failonerror="${test.failonerror}">
			<arg value="${test.entry}" />
			<classpath>
				<!-Add the src to the classpath so that the classloader can pick
					up any resource files that are held in the source (for tests) ->
				<pathelement location="${build}" />
				<pathelement path="${classpath}" />
			</classpath>
		</java>
		-->

	</target>

	<!-- Remove all the files used by the build process -->
	<target name="clean" depends="cvsclean">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}" />
		<delete dir="${dist}" />
	</target>

	<!-- Create a full release-->
	<!-- To set the version on the command line then use
		ant -Dversion=0.0.1 release -->
	<target name="release" depends="clean,init" if="version">
		<echo message="Creating version ${version}" />
		<property name="ver" value="-${version}" />
		<antcall target="setup">
			<param name="cvsver" value="${version}" />
		</antcall>
		<!-- code.exists property is not propagated back to here-->
		<property name="code.exists" value="false" />
		<available property="code.exists" file="${src}/com" type="dir" />

		<antcall target="dist">
			<param name="ver" value="${version}" />
			<param name="fver" value="-${version}" />
		</antcall>
		<!-- Load the last version and build date into a property 
		The tag should ensure that only the last version is ever loaded -->

		<property name="propfile" value="version.properties" />
		<property name="proppath" value="${base.dir}/${propfile}" />

		<!-- Make sure that we don't do the changelog twice -->
		<loadproperties srcFile="${proppath}">
			<filterchain>
				<linecontains>
					<contains value="last.version=${version}" />
				</linecontains>
			</filterchain>
		</loadproperties>
		
		<antcall target="changelog">
			<propertyset>
				<propertyref prefix="prop" />
			</propertyset>
		</antcall>
		<antcall target="cvsclean" />
	</target>

	<target name="changelog" unless="${last.version}">
		<property file="${proppath}" />
		<!-- If this fails try updating your version of cvs.exe from 
		http://ftp.gnu.org/non-gnu/cvs/binary/stable/x86-woe/-->
		<cvschangelog cvsRoot="${cvsroot}" dir="${ws.dist}" package="${package}" destfile="${dist}/changelog.xml" tag="${version}" start="${last.build}">
		</cvschangelog>
		<style in="${dist}/changelog.xml" out="${dist}/changelog.html" style="${ant.home}/etc/changelog.xsl">
			<param name="title" expression="${package} ChangeLog" />
			<param name="module" expression="${package}" />
			<!--	Used to build the URL to look at the revision
		<param name="cvsweb" expression="http://cvs.apache.org/viewcvs/" /> 
		-->
		</style>
		<tstamp>
			<format property="lastbuild" pattern="dd MMM yyyy" locale="en,UK" />
		</tstamp>

		<propertyfile file="${proppath}">
			<entry key="last.version" value="${version}" />
			<entry key="last.build" value="${lastbuild}" />
		</propertyfile>
		<cvs cvsRoot="${cvsroot}" command="update -A ${propfile}" tag="${cvsver}" dest="${ws.dist}/${package}" />
		<cvs cvsRoot="${cvsroot}" command="commit -m 'automated commit' ${propfile}" tag="${cvsver}" dest="${ws.dist}/${package}" />
	</target>

	<!-- Pre requisite for the Release project to be available within the workspace -->
	<!-- Must be run from within eclipse -->
	<!-- If this fails then on the Run As -> Ant Build... 
	Under the JRE tab click Run in the same JRE as the workspace -->
	<target name="release-copy" depends="release" description="Builds from CVS and copies EAR to Release project">
		<property name="reldir" value="../Release/${package}/${version}" />
		<mkdir dir="${reldir}" />
		<echo message="Version ${version}" />
		<echo message="Copying from ${dist} to ${reldir}" />
		<copy todir="${reldir}">
			<fileset dir="${ws.dist}" includes="${package}.dist/**" />
			<globmapper from="${package}.dist" to="Archive" />
		</copy>
		<eclipse.refreshLocal resource="Release" depth="infinite" />
		<!-- Use Eclipse to add to cvs, the add command is too painful to do here... -->
	</target>
	
	<!-- Must be run from within eclipse -->
	<!-- If this fails then on the Run As -> Ant Build... 
	Under the JRE tab click Run in the same JRE as the workspace -->
	<target name="workspace" depends="jaxb-local,dist" description="Builds from CVS and copies JAR to related projects and regenerates the local java files">
		<!-- Template to copy jar files to where they are used
		<copy todir="../<<My Project>>/WebContent/WEB-INF/lib" file="${dist}/lib/${package}.jar"/>
		<eclipse.refreshLocal resource="<<My Project>>/WebContent/WEB-INF/lib" depth="infinite"/>
		-->
	</target>
</project>