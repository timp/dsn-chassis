#summary protocol/API specifications for the StudyMetadataServices

= !AtomPub APIs =

This section defines draft APIs for the StudyMetadataServices based on the [http://www.atomenabled.org/developers/protocol/atom-protocol-spec.php Atom Publishing Protocol (AtomPub)].

For a basic introduction to use of !AtomPub, see the [http://code.google.com/apis/gdata/docs/2.0/basics.html Google Data APIs Protocol Basics].

----
== Study Metadata Persistence Service API ==

This section defines an API for a service that provides basic persistence capabilities (create, retrieve, update, delete) for metadata records that capture information about research studies, such as their title, summary, year of start and end, location, etc.

This API is a *content-only extension of !AtomPub*. I.e., no new protocol operations are introduced. The API uses the [http://www.atomenabled.org/developers/syndication/atom-format-spec.php#extending_atom extensibility] of the [http://www.atomenabled.org/developers/syndication/atom-format-spec.php Atom Syndication Format] to include custom metadata elements into entry documents. The [http://www.atomenabled.org/developers/protocol/atom-protocol-spec.php AtomPub spec] mandates that a conforming processor must store any foreign markup, thus it is reasonable to expect that all of the operations below would be supported by any !AtomPub implementation.

The sub-sections below assume that a Study Metadata Persistence Service endpoint is deployed at

   * http://example.org/chassis/atom/edit/studies
   
In the [http://www.atomenabled.org/developers/protocol/atom-protocol-spec.php#terminology AtomPub terminology], this URL is the URL of a Collection. Each study metadata record becomes an Entry Resource which is a Member of this Collection.
   
=== Creating a New Study Metadata Record ===

To create a new study metadata record, send an HTTP POST request with an Atom entry document to the service endpoint URL.

For example, the request below creates a new study metadata record, describing a drug resistance study in Kampala, Uganda.

{{{
POST /chassis/atom/edit/studies HTTP/1.1
Host: example.org
Content-Type: application/atom+xml;type=entry;charset="utf-8"
Content-Length: nnn

<entry xmlns="http://www.w3.org/2005/Atom">
  <title>Uganda-Kampala-2006</title>
  <summary>A study of malaria drug resistance near Kampala, Uganda, from 2006 to 2007.</summary>
  <author>
    <name>Freda Bloggs</name>
    <email>freda@example.org</email>
  </author>
  <category scheme="http://www.cggh.org/chassis/atom/categories" term="study"/>
  <content type="application/xml">
    <study xmlns="http://www.cggh.org/chassis/atom/xmlns">
      <country>UG</country>
      <location>
        <lat>0.31311</lat>
        <lon>32.58545</lon>
      </location>
      <startyear>2006</startyear>
      <endyear>2007</endyear>
      <samplesize>687</samplesize>
    </study>
  </content>
</entry>
}}}

If successful, the response will be `201 Created`, and should look something like:

{{{
HTTP/1.1 201 Created
Transfer-Encoding: chunked
Date: Mon, 06 Jul 2009 11:04:29 GMT
Content-type: application/atom+xml;charset=UTF-8
Location: http://example.org/chassis/atom/edit/studies?id=urn:uuid:f4070192-c65d-48d7-915f-81d38f61d359
Server: Apache-Coyote/1.1

<entry xmlns="http://www.w3.org/2005/Atom">
  <id>urn:uuid:f4070192-c65d-48d7-915f-81d38f61d359</id>
  <updated>2009-07-06T12:04:29+01:00</updated>
  <published>2009-07-06T12:04:29+01:00</published>
  <link href="?id=urn:uuid:f4070192-c65d-48d7-915f-81d38f61d359" rel="edit" type="application/atom+xml"/>
  <title>Uganda-Kampala-2006</title>
  <summary>A study of malaria drug resistance near Kampala, Uganda, from 2006 to 2007.</summary>
  <author>
    <name>Freda Bloggs</name>
    <email>freda@example.org</email>
  </author>
  <category scheme="http://www.cggh.org/chassis/atom/categories" term="study"/>
  <content type="application/xml">
    <study xmlns="http://www.cggh.org/chassis/atom/xmlns">
      <country>UG</country>
      <location>
        <lat>0.31311</lat>
        <lon>32.58545</lon>
      </location>
      <startyear>2006</startyear>
      <endyear>2007</endyear>
      <samplesize>687</samplesize>
    </study>
  </content>
</entry>
}}}

The absolute URL of the new study metadata record is given by the value of the `Location` header in the HTTP response. The same URL is also given as a relative URL in the value of the `link` element `href` attribute, where the `rel` is `edit`.

Note that the service will automatically generate an `id` and populate the `published` and `updated` elements.

The `title`, `summary` and `author` elements are used from the `atom` namespace. The `author` is the author of the metadata record. The rest of the study metadata is given within the `content` element, using the Chassis XML namespace.

Chassis defines a small set of elements to include within the `study` element, including `country`, `location`, `startyear`, `endyear` and `samplesize`. Any other elements from any other namespace may also be included within the `study` element, providing extensibility for specific data-sharing networks. The content of the `study` element should conform to the following [http://www.relaxng.org/compact-tutorial-20030326.html RelaxNG schema]:

{{{
namespace local = "http://www.cggh.org/chassis/atom/xmlns"

chassisStudy = 
  element study {
  ( chassisCountry*
  & chassisLocation*
  & chassisStartYear?
  & chassisEndYear?
  & chassisSampleSize? 
  & anyElement* )
} 

# should be valid ISO 3166 country code
chassisCountry = element country { text }

chassisLocation = element location {
  ( element lat { xsd:decimal }
  & element lon { xsd:decimal } )
}

chassisStartYear = element startyear { xsd:gYear }

chassisEndYear = element endyear { xsd:gYear }

chassisSampleSize = element samplesize { xsd:int }
}}}

=== Retrieving a Study Metadata Record ===

To retrieve a previously-created study metadata record, send an HTTP GET request to the metadata record URL.

For example, the request below retrieve the metadata record for the Kampala study created above.

{{{
GET /chassis/atom/edit/studies?id=urn:uuid:f4070192-c65d-48d7-915f-81d38f61d359 HTTP/1.1
Host: example.org
}}}

If successful, the response will be `200 OK`, and should look something like:

{{{
HTTP/1.1 200 OK
Transfer-Encoding: chunked
Date: Mon, 06 Jul 2009 11:45:53 GMT
Content-Type: application/atom+xml;charset=UTF-8
Server: Apache-Coyote/1.1

<entry xmlns="http://www.w3.org/2005/Atom">
  <id>urn:uuid:f4070192-c65d-48d7-915f-81d38f61d359</id>
  <updated>2009-07-06T12:04:29+01:00</updated>
  <published>2009-07-06T12:04:29+01:00</published>
  <link href="?id=urn:uuid:f4070192-c65d-48d7-915f-81d38f61d359" rel="edit" type="application/atom+xml"/>
  <title>Uganda-Kampala-2006</title>
  <summary>A study of malaria drug resistance near Kampala, Uganda, from 2006 to 2007.</summary>
  <author>
    <name>Freda Bloggs</name>
    <email>freda@example.org</email>
  </author>
  <category scheme="http://www.cggh.org/chassis/atom/categories" term="study"/>
  <content type="application/xml">
    <study xmlns="http://www.cggh.org/chassis/atom/xmlns">
      <country>UG</country>
      <location>
        <lat>0.31311</lat>
        <lon>32.58545</lon>
      </location>
      <startyear>2006</startyear>
      <endyear>2007</endyear>
      <samplesize>687</samplesize>
    </study>
  </content>
</entry>
}}}

=== Updating a Study Metadata Record ===

To update a previously created metadata record, send an HTTP PUT request to the metadata record URL, containing the updated record.

Below is a request to update the metadata record created above, to amend the summary. Note that the request does not need to include the `id` or `updated` elements, these will be automatically handled by the service.

{{{
PUT /chassis/atom/edit/studies?id=urn:uuid:f4070192-c65d-48d7-915f-81d38f61d359 HTTP/1.1
Host: example.org
Content-Type: application/atom+xml;type=entry;charset="utf-8"
Content-Length: nnn

<entry xmlns="http://www.w3.org/2005/Atom">
  <title>Uganda-Kampala-2006</title>
  <summary>A study of malaria drug resistance near Kampala, Uganda, from 2006 to 2007. 
  The study showed an unadjusted risk of failure of 26.5% for AQ+SP treatment at 28 days.</summary>
  <author>
    <name>Freda Bloggs</name>
    <email>freda@example.org</email>
  </author>
  <category scheme="http://www.cggh.org/chassis/atom/categories" term="study"/>
  <content type="application/xml">
    <study xmlns="http://www.cggh.org/chassis/atom/xmlns">
      <country>UG</country>
      <location>
        <lat>0.31311</lat>
        <lon>32.58545</lon>
      </location>
      <startyear>2006</startyear>
      <endyear>2007</endyear>
      <samplesize>687</samplesize>
    </study>
  </content>
</entry>
}}}

If successful, the response should be `200 OK`, and should look something like:

{{{
HTTP/1.1 200 OK
Transfer-Encoding: chunked
Date: Mon, 06 Jul 2009 12:51:34 GMT
Content-Type: application/atom+xml;charset=UTF-8
Server: Apache-Coyote/1.1

<entry xmlns="http://www.w3.org/2005/Atom">
  <id>urn:uuid:f4070192-c65d-48d7-915f-81d38f61d359</id>
  <updated>2009-07-06T13:51:34+01:00</updated>
  <published>2009-07-06T12:04:29+01:00</published>
  <link href="?id=urn:uuid:f4070192-c65d-48d7-915f-81d38f61d359" rel="edit" type="application/atom+xml"/>
  <title>Uganda-Kampala-2006</title>
  <summary>A study of malaria drug resistance near Kampala, Uganda, from 2006 to 2007. 
  The study showed an unadjusted risk of failure of 26.5% for AQ+SP treatment at 28 days.</summary>
  <author>
    <name>Freda Bloggs</name>
    <email>freda@example.org</email>
  </author>
  <category scheme="http://www.cggh.org/chassis/atom/categories" term="study"/>
  <content type="application/xml">
    <study xmlns="http://www.cggh.org/chassis/atom/xmlns">
      <country>UG</country>
      <location>
        <lat>0.31311</lat>
        <lon>32.58545</lon>
      </location>
      <startyear>2006</startyear>
      <endyear>2007</endyear>
      <samplesize>687</samplesize>
    </study>
  </content>
</entry>
}}}

If your firewall blocks PUT requests, or your client can only perform GET and POST requests (e.g., GWT), send a POST request with the following header field:

{{{
X-HTTP-Method-Override: PUT
}}} 

=== Deleting a Study Metadata Record ===

To delete a previously created metadata record, send an HTTP DELETE request to the record URL.

For example, the request below deletes the metadata record created above.

{{{
DELETE /chassis/atom/edit/studies?id=urn:uuid:f4070192-c65d-48d7-915f-81d38f61d359 HTTP/1.1
Host: example.org
}}}

If successful, the response will be `204 No Content`.

If your firewall blocks DELETE requests, or your client can only perform GET and POST requests (e.g., GWT), send a POST request with the following header field:

{{{
X-HTTP-Method-Override: DELETE
}}} 

=== Retrieving a Feed of All Study Metadata Records ===

To retrieve a feed of all study metadata records held by a study metadata persistence service, send an HTTP GET request to the service endpoint URL.

For example, the request below retrieves a feed of all study metadata records from the service.

{{{
GET /chassis/atom/edit/studies HTTP/1.1
Host: example.org
}}}

If successful, the response will be `200 OK`, and should look something like:

{{{
HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Content-Type: application/atom+xml;charset=UTF-8
Transfer-Encoding: chunked
Date: Mon, 06 Jul 2009 12:56:40 GMT

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>urn:uuid:bbdc13e4-278d-464b-86fb-7e9161383171</id>
  <updated>2009-07-06T13:51:34+01:00</updated>
  <title>All Studies</title>
  <link href="#" rel="edit" type="application/atom+xml"/>
  <link href="#" rel="self" type="application/atom+xml"/>
  <entry>
    <id>urn:uuid:f4070192-c65d-48d7-915f-81d38f61d359</id>
    <updated>2009-07-06T13:51:34+01:00</updated>
    <published>2009-07-06T12:04:29+01:00</published>
    <link href="?id=urn:uuid:f4070192-c65d-48d7-915f-81d38f61d359" rel="edit" type="application/atom+xml"/>
    <title>Uganda-Kampala-2006</title>
    <summary>A study of malaria drug resistance near Kampala, Uganda, from 2006 to 2007. 
  The study showed an unadjusted risk of failure of 26.5% for AQ+SP treatment at 28 days.</summary>
    <author>
      <name>Freda Bloggs</name>
      <email>freda@example.org</email>
    </author>
    <category scheme="http://www.cggh.org/chassis/atom/categories" term="study"/>
    <content type="application/xml">
      <study xmlns="http://www.cggh.org/chassis/atom/xmlns">
        <country>UG</country>
        <location>
          <lat>0.31311</lat>
          <lon>32.58545</lon>
        </location>
        <startyear>2006</startyear>
        <endyear>2007</endyear>
        <samplesize>687</samplesize>
      </study>
    </content>
  </entry>
</feed>
}}}

In this case, only a single record has been created so far, hence the feed only contains a single entry.

----
== Study Metadata Query Service API ==

Retrieving the entire feed of study metadata records in a collection is inefficient, where only a subset of the records are required, e.g., records for studies in a given country, or records for studies starting in a given year.

This section defines a protocol for querying a collection of study metadata records. The protocol uses the [http://www.w3.org/TR/xquery/ XQuery] query language for XML, and hence supports arbitrary queries over the study metadata. While XQuery is a W3C standard, this is protocol is *not* a standard part of the !AtomPub protocol, and hence may not be implemented by all !AtomPub implementations. It is, however, supported in at least one existing !AtomPub implementation.

This protocol allows the client to submit any XQuery over the metadata collection, and hence gives the client the power to ask arbitrary questions. This is especially useful in the case where a deployment of Chassis uses a significant number of custom metadata elements, and requires query capabilities that are unique to the particular data-sharing network. In this case, the protocol can accommodate the queries, and no additional server-side software development is required to support the query.

The downside is the relatively greater complexity of the XQuery language. Hence, this protocol may be supplemented or replaced in future by simplified query protocols supporting commonly needed operations.

Given a Study Metadata Query Service endpoint at:

   * http://example.org/chassis/atom/query/studies
   
To submit a query, send an HTTP POST request to the endpoint URL, with the XQuery as the body of the request.

For example, the request below contains a query that returns an Atom feed document containing only those entries for studies that started in the year 2006.

{{{
POST /chassis/atom/query/studies HTTP/1.1
Host: example.org
Content-Type: application/xquery
Content-Length: nnn

<atom:feed 
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns="http://www.cggh.org/chassis/atom/xmlns">
{
/atom:feed/atom:id,
/atom:feed/atom:title,
/atom:feed/atom:updated,
for $e in (/atom:feed/atom:entry)
where string($e//startyear) = "2006"
return $e
}
</atom:feed>
}}}

If successful, the response should be `200 OK`, and should look something like:

{{{
HTTP/1.1 200 OK
Transfer-Encoding: chunked
Date: Mon, 06 Jul 2009 13:24:50 GMT
Content-Type: application/atom+xml;charset=UTF-8
Server: Apache-Coyote/1.1

<atom:feed xmlns="http://www.cggh.org/chassis/atom/xmlns" xmlns:atom="http://www.w3.org/2005/Atom">
  <id xmlns="http://www.w3.org/2005/Atom">urn:uuid:bbdc13e4-278d-464b-86fb-7e9161383171</id>
  <title xmlns="http://www.w3.org/2005/Atom">All Studies</title>
  <updated xmlns="http://www.w3.org/2005/Atom">2009-07-06T13:51:34+01:00</updated>
  <entry xmlns="http://www.w3.org/2005/Atom">
    <id>urn:uuid:f4070192-c65d-48d7-915f-81d38f61d359</id>
    <updated>2009-07-06T13:51:34+01:00</updated>
    <published>2009-07-06T12:04:29+01:00</published>
    <link href="?id=urn:uuid:f4070192-c65d-48d7-915f-81d38f61d359" rel="edit" type="application/atom+xml"/>
    <title>Uganda-Kampala-2006</title>
    <summary>A study of malaria drug resistance near Kampala, Uganda, from 2006 to 2007. 
  The study showed an unadjusted risk of failure of 26.5% for AQ+SP treatment at 28 days.</summary>
    <author>
      <name>Freda Bloggs</name>
      <email>freda@example.org</email>
    </author>
    <category scheme="http://www.cggh.org/chassis/atom/categories" term="study"/>
    <content type="application/xml">
      <study xmlns="http://www.cggh.org/chassis/atom/xmlns">
        <country>UG</country>
        <location>
          <lat>0.31311</lat>
          <lon>32.58545</lon>
        </location>
        <startyear>2006</startyear>
        <endyear>2007</endyear>
        <samplesize>687</samplesize>
      </study>
    </content>
  </entry>
</atom:feed>
}}}

Note that, how the namespace prefixes get constructed in the response will depend on how the query is constructed. This should not matter for any client that processes the response in a namespace-aware manner, but may be an issue for a client that is not aware of XML namespaces, as in some legacy browsers.

----
== Study Metadata Bootstrap Service API ==

One of the main advantages in using a protocol based on !AtomPub is that there are a number of open-source implementations of the protocol already available. How you configure these implementations to provide a new Collection to use as the Study Metadata Persistence Service will depend between implementations. However, at least one [http://exist.sourceforge.net/atompub.html implementation] allows you to create a new Collection by posting an atom feed document to the URL at which you would like the Collection to reside. This provides a convenient way to bootstrap a Study Metadata Persistence Service. Hence this API may be useful if we adopt that [http://exist.sourceforge.net/atompub.html implementation], but may change or disappear if we need to adopt a different implementation.

To create a new study metadata persistence service, POST a new Atom feed document to the URL at which you would like the service endpoint (i.e., the Collection) to reside.

{{{
POST /chassis/atom/edit/studies HTTP/1.1
Host: example.org
Content-Type: application/atom+xml
Content-Length: nnn

<feed xmlns="http://www.w3.org/2005/Atom">
  <title>All Studies</title>
</feed>
}}}

If successful, the response will be `204 No Content`.
