#summary protocol/API specifications for the StudyMetadataServices

This page defines APIs for the StudyMetadataServices based on the [http://www.atomenabled.org/developers/protocol/atom-protocol-spec.php Atom Publishing Protocol (AtomPub)].

The [http://code.google.com/apis/gdata/docs/2.0/basics.html Google Data APIs Protocol Basics] gives an introduction to how Google uses !AtomPub, and is a good introduction to the protocol. See also WhyAtom for some discussion of the pros and cons of using !AtomPub.

*Table of Contents*

<wiki:toc/>

----
= Chassis/`*` Study Metadata Persistence Service API =

*0.1-alpha-2* (under development)

  * latest: [http://dsn-chassis.googlecode.com/svn/branches/0.1-alpha-2/generic/docs/content/api/service/study/persistence/index.html 0.1-alpha-2-SNAPSHOT]

----
= Study Metadata Query Service API =

*Draft*

Retrieving the entire feed of study metadata records in a collection is inefficient, where only a subset of the records are required, e.g., records for studies in a given country, or records for studies starting in a given year.

This section defines a protocol for querying a collection of study metadata records. The protocol uses the [http://www.w3.org/TR/xquery/ XQuery] query language for XML, and hence supports arbitrary queries over the study metadata. While XQuery is a W3C standard, this is protocol is *not* a standard part of the !AtomPub protocol, and hence may not be implemented by all !AtomPub implementations. It is, however, supported in at least one [http://exist.sourceforge.net/atompub.html existing AtomPub implementation].

This protocol allows the client to submit any XQuery over the metadata collection, and hence gives the client the power to ask arbitrary questions. This is especially useful in the case where a deployment of Chassis uses a significant number of custom metadata elements, and requires query capabilities that are unique to the particular data-sharing network. In this case, the protocol can accommodate the queries, and no additional server-side software development is required to support the query.

The downside is the relatively greater complexity of the XQuery language. Hence, this protocol may be supplemented or replaced in future by simplified query protocols supporting commonly needed operations.

Given a Study Metadata Query Service endpoint at:

   * http://example.org/chassis/atom/query/studies
   
To submit a query, send an HTTP POST request to the endpoint URL, with the XQuery as the body of the request.

For example, the request below contains a query that returns an Atom feed document containing only those entries for studies that started in the year 2006.

{{{
POST /chassis/atom/query/studies HTTP/1.1
Host: example.org
Content-Type: application/xquery
Content-Length: nnn

<atom:feed 
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns="http://www.cggh.org/chassis/atom/xmlns">
{
/atom:feed/atom:id,
/atom:feed/atom:title,
/atom:feed/atom:updated,
for $e in (/atom:feed/atom:entry)
where string($e//startyear) = "2006"
return $e
}
</atom:feed>
}}}

If successful, the response should be `200 OK`, and should look something like:

{{{
HTTP/1.1 200 OK
Transfer-Encoding: chunked
Date: Mon, 06 Jul 2009 13:24:50 GMT
Content-Type: application/atom+xml;charset=UTF-8
Server: Apache-Coyote/1.1

<atom:feed xmlns="http://www.cggh.org/chassis/atom/xmlns" xmlns:atom="http://www.w3.org/2005/Atom">
  <id xmlns="http://www.w3.org/2005/Atom">urn:uuid:bbdc13e4-278d-464b-86fb-7e9161383171</id>
  <title xmlns="http://www.w3.org/2005/Atom">All Studies</title>
  <updated xmlns="http://www.w3.org/2005/Atom">2009-07-06T13:51:34+01:00</updated>
  <entry xmlns="http://www.w3.org/2005/Atom">
    <id>urn:uuid:f4070192-c65d-48d7-915f-81d38f61d359</id>
    <updated>2009-07-06T13:51:34+01:00</updated>
    <published>2009-07-06T12:04:29+01:00</published>
    <link href="?id=urn:uuid:f4070192-c65d-48d7-915f-81d38f61d359" rel="edit" type="application/atom+xml"/>
    <title>Uganda-Kampala-2006</title>
    <summary>A study of malaria drug resistance near Kampala, Uganda, from 2006 to 2007. 
  The study showed an unadjusted risk of failure of 26.5% for AQ+SP treatment at 28 days.</summary>
    <author>
      <name>Freda Bloggs</name>
      <email>freda@example.org</email>
    </author>
    <category scheme="http://www.cggh.org/chassis/atom/categories" term="study"/>
    <content type="application/xml">
      <study xmlns="http://www.cggh.org/chassis/atom/xmlns">
        <country>UG</country>
        <location>
          <lat>0.31311</lat>
          <lon>32.58545</lon>
        </location>
        <startyear>2006</startyear>
        <endyear>2007</endyear>
        <samplesize>687</samplesize>
      </study>
    </content>
  </entry>
</atom:feed>
}}}

Note that, how the namespace prefixes get constructed in the response will depend on how the query is constructed. This should not matter for any client that processes the response in a namespace-aware manner, but may be an issue for a client that is not aware of XML namespaces, as in some legacy browsers.

----
= Study Metadata Bootstrap Service API =

One of the main advantages in using a protocol based on !AtomPub is that there are a number of open-source implementations of the protocol already available. How you configure these implementations to provide a new Collection to use as the Study Metadata Persistence Service will depend between implementations. However, at least one [http://exist.sourceforge.net/atompub.html implementation] allows you to create a new Collection by posting an atom feed document to the URL at which you would like the Collection to reside. This provides a convenient way to bootstrap a Study Metadata Persistence Service. Hence this API may be useful if we adopt that [http://exist.sourceforge.net/atompub.html implementation], but may change or disappear if we need to adopt a different implementation.

To create a new study metadata persistence service, POST a new Atom feed document to the URL at which you would like the service endpoint (i.e., the Collection) to reside.

{{{
POST /chassis/atom/edit/studies HTTP/1.1
Host: example.org
Content-Type: application/atom+xml
Content-Length: nnn

<feed xmlns="http://www.w3.org/2005/Atom">
  <title>All Studies</title>
</feed>
}}}

If successful, the response will be `204 No Content`.