# summary documentation and examples for using the chassis GWT AtomPub client library

<wiki:toc/>

= Introduction =

TODO

= Download & Installation =

TODO how to download GWT client lib & set up in eclipse

Required imports:

{{{
org.cggh.chassis.gwt.lib.atom.client.*;
}}}

= Examples =

== Retrieving a Feed ==

{{{
// atom collection url
String collectionURL = "http://example.org/chassis/atom/somecollection";

// instantiate an atom service
AtomService<AtomEntry,AtomFeed> service = new AtomService<AtomEntry,AtomFeed>(collectionURL);

// define a callback
CallbackWithAtomFeed<AtomFeed> callback = new CallbackWithAtomFeed<AtomFeed>() {

    public void onSuccess(Request request, Response response, AtomFeed newFeed) {
        // do something with the feed
    }

    public void onError(Request request, Throwable exception) {
        // handle error that occurs prior to response being received
    }

    public void onError(Request request, Response response, Throwable exception) {
        // handle error that occurs after response is received, e.g. if could not parse xml
    }

    public void onFailure(Request request, Response response) {
        // handle http response other than 200
    }

};

try {

    // send the request
	service.getFeed(callback);

} catch (RequestException ex) {
    // handle error that occurs prior to request being sent, e.g., violate same-origin policy
}
}}}

== Creating a New Entry ==

{{{
// instantiate a new entry
AtomEntry entry = new AtomEntry();
entry.setTitle("this is a new entry");
entry.setSummary("this entry is an example of how to post a new entry to a collection");

// atom collection url
String collectionURL = "http://example.org/chassis/atom/somecollection";

// instantiate an atom service
AtomService<AtomEntry,AtomFeed> service = new AtomService<AtomEntry,AtomFeed>(collectionURL);

// define a callback
CallbackWithAtomEntry<AtomEntry> callback = new CallbackWithAtomEntry<AtomEntry>() {

    public void onSuccess(Request request, Response response, AtomEntry newEntry) {
        // do something with the entry
    }

    public void onError(Request request, Throwable exception) {
        // handle error that occurs prior to response being received
    }

    public void onError(Request request, Response response, Throwable exception) {
        // handle error that occurs after response is received, e.g. if could not parse xml
    }

    public void onFailure(Request request, Response response) {
        // handle http response other than 201
    }

};

try {

    // send the request
	service.postEntry(entry, callback);

} catch (RequestException ex) {
    // handle error that occurs prior to request being sent, e.g., violate same-origin policy
}
}}}

== Retrieving an Entry ==

{{{
// TODO
}}}

== Updating an Entry ==

{{{
// TODO
}}}

== Deleting an Entry ==

{{{
// TODO
}}}

= Extending the Library =

@@TODO
