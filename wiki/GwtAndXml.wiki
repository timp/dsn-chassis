= Introduction =

This page contains notes on using XML within the Google Web Toolkit (GWT).

Links:

   * [http://google-web-toolkit.googlecode.com/svn/javadoc/1.6/com/google/gwt/xml/client/package-summary.html com.google.gwt.xml.client package javadoc]
   * [http://code.google.com/p/bunsenandbeaker/wiki/DevGuideXML bunsenandbeaker DevGuideXML]

All Java snippets require:

{{{
import com.google.gwt.xml.client.*;
}}}
   
= Parsing and Searching XML Documents That Use XML Namespaces =

Given the following XML string:

{{{
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:x="http://www.cggh.org/chassis/xmlns">
  <title>All Studies</title>
  <x:foo>bar</x:foo>
</feed>
}}}

Parse the XML string:

{{{
String xml = "[xml string goes here]";
Document doc = XMLParser.parse(xml);
}}}

You can search for element nodes by local tag name:

{{{
NodeList nodes = doc.getElementsByTagName("title");
Node n = nodes.item(0);
String namespaceURI = n.getNamespaceURI(); // will be "http://www.w3.org/2005/Atom"
String prefix = n.getPrefix(); // will be null
String nodeName = n.getNodeName(); // will be "title"
String nodeValue = n.getNodeValue(); // will be null
}}}

N.B. there are no methods in the GWL XML API to perform a namespace-aware search of the document. E.g., there is nothing like `doc.getElementsByTagNameNS(ns, name)`. At a guess, this might be because of browser variability in implementing an equivalent underlying JavaScript method. 

To perform a namespace-aware search of the document, you can search by tag name, then filter by the node's namespace URI. E.g.:

{{{
NodeList nodes = doc.getElementsByTagName("title");
for (int i=0; i<nodes.length; i++) {
    Node n = nodes.item(i);
    if (n.getNamespaceURI().equals("http://www.w3.org/2005/Atom")) {
        // you've found the element you wanted, now do something with it...
    }
}
}}}

If you need to do this often, you might create a utility method, e.g.:

{{{
public static List<Node> getElementsByTagNameNS(Document doc, String ns, String name) {
    ArrayList<Node> filtered = new ArrayList<Node>();
    NodeList initial = doc.getElementsByTagName(name);
    for (int i=0; i<initial.getLength(); i++) {
        Node n = initial.item(i);
        if (n.getNamespaceURI().equals(ns)) {
            filtered.add(n);
        }
    }
    return filtered;
}
}}}
	
== Creating XML Documents That Use XML Namespaces ==

To create a new, empty, XML document:

{{{
Document doc = XMLParser.createDocument();
}}}

You can create and append elements, e.g.:

{{{
Document doc = XMLParser.createDocument();
Element docroot = doc.createElement("docroot");
doc.appendChild(docroot);
Element anelement = doc.createElement("anelement");
docroot.appendChild(anelement);
anelement.appendChild(doc.createTextNode("hello xml world"));
Window.alert(doc.toString());
}}}

However, there are no methods in the GWT XML API to create elements with namespace URIs, i.e., there is nothing like `doc.createElementNS(ns, name)`.

If you try to hack namespaces manually, e.g.:

{{{
Document doc = XMLParser.createDocument();
Element root = doc.createElement("feed");
doc.appendChild(root);
root.setAttribute("xmlns", "http://www.w3.org/2005/Atom"); // this doesn't work in firefox at least
}}}

In firefox 3, the last line of code simply has no effect. 

However, you can set up a new document by parsing an initial XML string with the namespaces setup on the root element, e.g.:

{{{
String xml = 	
    "<feed\n" +
    "  xmlns=\"http://www.w3.org/2005/Atom\"\n" +
    "  xmlns:x=\"http://www.cggh.org/chassis/xmlns\">\n" +
    "</feed>" ;

Element feedElement = (Element) doc.getElementsByTagName("feed").item(0);

Element titleElement = doc.createElement("title");
titleElement.appendChild(doc.createTextNode("All Studies"));
feedElement.appendChild(titleElement);
String ns = titleElement.getNamespaceURI(); // always null
		
Element fooElement = doc.createElement("x:foo");
fooElement.appendChild(doc.createTextNode("bar"));
feedElement.appendChild(fooElement);
ns = fooElement.getNamespaceURI(); // always null
String prefix = fooElement.getPrefix(); // "x"
}}}

Although the `getNamespaceURI()` method on the elements you create always returns null, the resulting XML document is as you intend, i.e. has namespaces set correctly.

You need to be careful here, as you can create and append elements with prefixes that do not correspond to any defined XML namespace prefix on the document. E.g.:

{{{
Element badElement = doc.createElement("bad:element");
feedElement.appendChild(badElement);
}}}

will work even if the namespace prefix `bad` is not defined anywhere on the document. The resulting document will not conform with http://www.w3.org/TR/REC-xml-names/#ns-qualnames.


