#summary notes on testing strategies for GWT

There are several possible strategies for unit testing code intended for use in GWT applications. Each has some quirky trade-offs.

= Extend !GWTTestCase =

The standard way to test GWT code is to extend GWTTestCase. Two test runners are then available, both of which can be invoked from the Eclipse "Run As" context menu if you have the Google Eclipse plugin installed.

The main problem with using the GWT test framework is that test execution is extremely slow. Executing the simplest of tests can take upward of 30s. This makes unit testing in small increments difficult.

A second difficulty is that you can only include code in the tests that can be translated to JavaScript. You cannot, for example, use Java mocking libraries such as easymock, because these cannot be translated to JavaScript. Because there is no easy way to mock out parts of the GWT libraries, testing your code in thin slices is made harder.

Nevertheless, this strategy does give you a way to test the correct functioning of your code after it is translated to JavaScript.

= Use Vanilla JUnit =

Alternatively, to test the behaviour of your Java GWT code as Java code (i.e., prior to any translation to JavaScript), you can use vanilla JUnit 3 or 4 test cases.

The main problem here is that many of the GWT libraries invoke JSNI code, and hence cannot be run in a pure Java environment.

To work around this problem, you can use a Java mocking library such as !EasyMock. You will, however, need to mock out classes as well as interfaces.

Using the !EasyMock 2.4 class extensions with !EasyMock 2.5.1, cglib-nodep-2.2 and JUnit 4 is known to work with Java 5 and Eclipe Ganymede. 
