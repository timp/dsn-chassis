<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns:b="http://www.springframework.org/schema/beans"
	xmlns="http://www.springframework.org/schema/security" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<b:bean id="propertyPlaceholderConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<b:property name="location">
			<b:value>/WEB-INF/security-cas-drupal.properties</b:value>
		</b:property>
	</b:bean>

	<http entry-point-ref="casEntryPoint" use-expressions="true">
		<intercept-url pattern="/insecure/xslt/**" access="permitAll" />
		<!-- restrict access to libraries and administrative scripts -->
		<intercept-url pattern="/service/admin/**"
			access="hasRole('ROLE_CHASSIS_ADMINISTRATOR')" />
		<intercept-url pattern="/service/config/**"
			access="hasRole('ROLE_CHASSIS_ADMINISTRATOR')" />
		<intercept-url pattern="/service/lib/**"
			access="hasRole('ROLE_CHASSIS_ADMINISTRATOR')" />
		<intercept-url pattern="/service/plugins/**"
			access="hasRole('ROLE_CHASSIS_ADMINISTRATOR')" />

		<!-- force authentication for all requests to service, but delegate access 
			control decisions to service -->
		<intercept-url pattern="/service/reports/**"
			access="hasAnyRole('ROLE_CHASSIS_CURATOR','ROLE_CHASSIS_ADMINISTRATOR')" />
		<intercept-url pattern="/service/**" access="hasRole('ROLE_CHASSIS_USER')" />

		<intercept-url pattern="/contributor/**"
			access="hasAnyRole('ROLE_CHASSIS_CONTRIBUTOR','ROLE_CHASSIS_ADMINISTRATOR')" />

		<intercept-url pattern="/personal-data/**"
			access="hasAnyRole('ROLE_CHASSIS_PERSONAL_DATA_REVIEWER','ROLE_CHASSIS_ADMINISTRATOR')" />

		<intercept-url pattern="/curator/**"
			access="hasAnyRole('ROLE_CHASSIS_CURATOR','ROLE_CHASSIS_ADMINISTRATOR')" />
		<intercept-url pattern="/report/**"
			access="hasAnyRole('ROLE_CHASSIS_CURATOR','ROLE_CHASSIS_REPORTER','ROLE_CHASSIS_ADMINISTRATOR')" />

		<intercept-url pattern="/study/**"
			access="hasAnyRole('ROLE_CHASSIS_CONTRIBUTOR','ROLE_CHASSIS_CURATOR','ROLE_CHASSIS_ADMINISTRATOR')" />

		<intercept-url pattern="/rest/**"
			access="hasRole('ROLE_CHASSIS_ADMINISTRATOR')" />
		<intercept-url pattern="/admin/**"
			access="hasRole('ROLE_CHASSIS_ADMINISTRATOR')" />
		<intercept-url pattern="/administration/**"
			access="hasRole('ROLE_CHASSIS_ADMINISTRATOR')" />
		<custom-filter ref="requestSingleLogoutFilter" before="LOGOUT_FILTER" />
		<custom-filter ref="singleLogoutFilter" before="CAS_FILTER" />
		<custom-filter ref="casFilter" position="CAS_FILTER" />
		<logout logout-success-url="/cas-logout.jsp" />
	</http>

	<authentication-manager alias="authManager">
		<authentication-provider ref="casAuthProvider" />
	</authentication-manager>

	<!-- <user-service id="userService"> <user name="rod" password="rod" authorities="ROLE_SUPERVISOR,ROLE_USER" 
		/> <user name="dianne" password="dianne" authorities="ROLE_USER" /> <user 
		name="scott" password="scott" authorities="ROLE_USER" /> </user-service> -->
	<b:bean id="userService"
		class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
		<b:property name="dataSource" ref="drupal6" />
		<b:property name="usersByUsernameQuery"
			value="
            SELECT users.mail as username , users.pass as password , users.status as enabled 
            FROM users 
            WHERE users.name = ?            
            " />
		<b:property name="authoritiesByUsernameQuery"
			value="
            SELECT users.mail AS username, role.name AS authority
            FROM users, users_roles, role
            WHERE users.uid = users_roles.uid
            AND users_roles.rid = role.rid
            AND users.mail = ?
            " />
	</b:bean>
	
	<b:bean id="drupal6"
        class="org.springframework.jndi.JndiObjectFactoryBean">
        <b:property name="jndiName"
            value="java:comp/env/jdbc/wwarn_drupal"/>   
        <b:property name="resourceRef"
            value="true" />
    </b:bean>
    
	<!-- This filter handles a Single Logout Request from the CAS Server -->
	<b:bean id="singleLogoutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter" />
	<!-- This filter redirects to the CAS Server to signal Single Logout should 
		be performed -->
	<b:bean id="requestSingleLogoutFilter"
		class="org.springframework.security.web.authentication.logout.LogoutFilter"
		p:filterProcessesUrl="/j_spring_cas_security_logout">
		<b:constructor-arg value="${cas.url}/logout" />
		<b:constructor-arg>
			<b:bean
				class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
		</b:constructor-arg>
	</b:bean>

	<b:bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties"
		p:service="http://localhost:8080/repo/j_spring_cas_security_check"
		p:authenticateAllArtifacts="true" />
		
	<b:bean id="casEntryPoint"
		class="org.springframework.security.cas.web.CasAuthenticationEntryPoint"
		p:serviceProperties-ref="serviceProperties" p:loginUrl="${cas.url}/login" />
		
	<b:bean id="casFilter"
		class="org.springframework.security.cas.web.CasAuthenticationFilter"
		p:authenticationManager-ref="authManager" p:serviceProperties-ref="serviceProperties"
		p:proxyGrantingTicketStorage-ref="pgtStorage"
		p:proxyReceptorUrl="/j_spring_cas_security_proxyreceptor">
		<b:property name="authenticationDetailsSource">
			<b:bean
				class="org.springframework.security.cas.web.authentication.ServiceAuthenticationDetailsSource" />
		</b:property>
		<b:property name="authenticationFailureHandler">
			<b:bean
				class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"
				p:defaultFailureUrl="/casfailed.jsp" />
		</b:property>
	</b:bean>
	
	<!-- NOTE: In a real application you should not use an in memory implementation. 
		You will also want to ensure to clean up expired tickets by calling ProxyGrantingTicketStorage.cleanup() -->
	<b:bean id="pgtStorage"
		class="org.jasig.cas.client.proxy.ProxyGrantingTicketStorageImpl" />
	<b:bean id="casAuthProvider"
		class="org.springframework.security.cas.authentication.CasAuthenticationProvider"
		p:serviceProperties-ref="serviceProperties" p:key="casAuthProviderKey">
		<b:property name="authenticationUserDetailsService">
			<b:bean
				class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
				<b:constructor-arg ref="userService" />
			</b:bean>
		</b:property>
		<b:property name="ticketValidator">
			<b:bean class="org.jasig.cas.client.validation.Cas20ProxyTicketValidator"
				p:acceptAnyProxy="true"
				p:proxyCallbackUrl="${chassis.url}/repo/j_spring_cas_security_proxyreceptor"
				p:proxyGrantingTicketStorage-ref="pgtStorage">
				<b:constructor-arg value="${cas.url}" />
			</b:bean>
		</b:property>
		<b:property name="statelessTicketCache">
			<b:bean
				class="org.springframework.security.cas.authentication.EhCacheBasedTicketCache">
				<b:property name="cache">
					<b:bean class="net.sf.ehcache.Cache" init-method="initialise"
						destroy-method="dispose">
						<b:constructor-arg value="casTickets"/> <!-- name -->
                        <b:constructor-arg value="50"/> <!-- maxElementsInMemory -->
                        <b:constructor-arg value="false"/> <!-- overflowToDisk -->
                        <b:constructor-arg value="false"/> <!-- eternal -->
                        <b:constructor-arg value="3600"/> <!-- timeToLiveSeconds -->
                        <b:constructor-arg value="900"/> <!-- timeToIdleSeconds -->
					</b:bean>
				</b:property>
			</b:bean>
		</b:property>
	</b:bean>

</b:beans>
